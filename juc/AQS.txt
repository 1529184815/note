1.同步队列
使用双向链表构成
获取锁失败 进去队列 获取锁成功 离开队列
2.获取独占锁
调用acquire()
获取同步状态成功 获取锁
获取同步状态不成功 
把线程添加到同步队列 如果同步队列尾节点为null 先创建头节点 头节点创建完成 自旋式加入队列
添加到队列后
判断当前线程是否是头节点如果是获取同步状态 成功 获取锁 不成功 线程被中断获取前驱节点被释放
3.释放独占锁
调用release（）
释放成功 唤醒后继节点
总结
在获取同步状态时，AQS维护一个同步队列，获取同步状态失败的线程会加入到队列中进行自旋；移除队列（或停止自旋）的条件是前驱节点是头结点并且成功获得了同步状态。在释放同步状态时，同步器会调用unparkSuccessor()方法唤醒后继节点

4.可中断式获取锁 acquireInterruptibly
在阻塞时抛出中断异常
5.超时等待式获取锁 tryAcquireNanos()
1. 在超时时间内，当前线程成功获取了锁；
2. 当前线程在超时时间内被中断；
3. 超时时间结束，仍未获得锁返回false。


共享锁
共享锁的获取acquireShared()
tryAcquireShared（判断是否获取同步状态）返回值大于等于0 获取成功
否则执行doAcquireShared（） 判断是否是头节点 且 获取同步状态 那么获取成功 否则自旋式判断

共享锁的释放releaseShared()
tryReleaseShared（同步状态释放成功） 
doReleaseShared（） （保证多个线程能够安全的释放同步状态）这里使用CAS保证

可中断，超时等待同上









